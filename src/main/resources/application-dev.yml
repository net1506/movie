spring:
  application:
    name: movie
  config:
    activate:
      on-profile: dev
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}/${DB_NAME:movie}?characterEncoding=UTF-8&serverTimezone=UTC
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:1234}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    show-sql: ${JPA_SHOW_SQL:true}
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:create}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        naming:
          physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        format_sql: ${JPA_FORMAT_SQL:false}
        highlight_sql: ${JPA_HIGHLIGHT_SQL:false}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
  cache:
    type: redis
  kafka:
    template:
      default-topic: my-topic
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:127.0.0.1:10000,127.0.0.1:10001,127.0.0.1:10002}
    properties:
      retry.backoff.ms: 5000
      request.timeout.ms: 30000
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: my-group #  Kafka Consumer 그룹 ID (같은 그룹이면 같은 메시지를 공유)
      enable-auto-commit: false
      auto-offset-reset: latest # 메시지 소비 시작 위치 설정 (가장 오래된 메시지부터 처리)
      properties:
        max.poll.interval.ms: 600000
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

queue:
  waiting-key: ${QUEUE_WAITING_KEY:waiting}
  active-key: ${QUEUE_ACTIVE_KEY:active}

logging:
  level:
    org.hibernate.SQL: ${LOGGING_LEVEL_SQL:DEBUG}  # 실행되는 SQL 로그 출력
    org.hibernate.orm.jdbc.bind: ${LOGGING_LEVEL_BIND:TRACE}  # SQL 바인딩된 파라미터 값 출력
